// Code generated by counterfeiter. DO NOT EDIT.
package s3svcfakes

import (
	"sync"

	"github.com/GetTerminus/s3helper/lib/aws/s3svc"
	"github.com/aws/aws-sdk-go/service/s3"
)

type FakeAPI struct {
	DeleteObjectsStub        func(*s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error)
	deleteObjectsMutex       sync.RWMutex
	deleteObjectsArgsForCall []struct {
		arg1 *s3.DeleteObjectsInput
	}
	deleteObjectsReturns struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}
	deleteObjectsReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}
	ListObjectVersionsStub        func(*s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error)
	listObjectVersionsMutex       sync.RWMutex
	listObjectVersionsArgsForCall []struct {
		arg1 *s3.ListObjectVersionsInput
	}
	listObjectVersionsReturns struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	listObjectVersionsReturnsOnCall map[int]struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) DeleteObjects(arg1 *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
	fake.deleteObjectsMutex.Lock()
	ret, specificReturn := fake.deleteObjectsReturnsOnCall[len(fake.deleteObjectsArgsForCall)]
	fake.deleteObjectsArgsForCall = append(fake.deleteObjectsArgsForCall, struct {
		arg1 *s3.DeleteObjectsInput
	}{arg1})
	fake.recordInvocation("DeleteObjects", []interface{}{arg1})
	fake.deleteObjectsMutex.Unlock()
	if fake.DeleteObjectsStub != nil {
		return fake.DeleteObjectsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteObjectsReturns.result1, fake.deleteObjectsReturns.result2
}

func (fake *FakeAPI) DeleteObjectsCallCount() int {
	fake.deleteObjectsMutex.RLock()
	defer fake.deleteObjectsMutex.RUnlock()
	return len(fake.deleteObjectsArgsForCall)
}

func (fake *FakeAPI) DeleteObjectsArgsForCall(i int) *s3.DeleteObjectsInput {
	fake.deleteObjectsMutex.RLock()
	defer fake.deleteObjectsMutex.RUnlock()
	return fake.deleteObjectsArgsForCall[i].arg1
}

func (fake *FakeAPI) DeleteObjectsReturns(result1 *s3.DeleteObjectsOutput, result2 error) {
	fake.DeleteObjectsStub = nil
	fake.deleteObjectsReturns = struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) DeleteObjectsReturnsOnCall(i int, result1 *s3.DeleteObjectsOutput, result2 error) {
	fake.DeleteObjectsStub = nil
	if fake.deleteObjectsReturnsOnCall == nil {
		fake.deleteObjectsReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectsOutput
			result2 error
		})
	}
	fake.deleteObjectsReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListObjectVersions(arg1 *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error) {
	fake.listObjectVersionsMutex.Lock()
	ret, specificReturn := fake.listObjectVersionsReturnsOnCall[len(fake.listObjectVersionsArgsForCall)]
	fake.listObjectVersionsArgsForCall = append(fake.listObjectVersionsArgsForCall, struct {
		arg1 *s3.ListObjectVersionsInput
	}{arg1})
	fake.recordInvocation("ListObjectVersions", []interface{}{arg1})
	fake.listObjectVersionsMutex.Unlock()
	if fake.ListObjectVersionsStub != nil {
		return fake.ListObjectVersionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listObjectVersionsReturns.result1, fake.listObjectVersionsReturns.result2
}

func (fake *FakeAPI) ListObjectVersionsCallCount() int {
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	return len(fake.listObjectVersionsArgsForCall)
}

func (fake *FakeAPI) ListObjectVersionsArgsForCall(i int) *s3.ListObjectVersionsInput {
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	return fake.listObjectVersionsArgsForCall[i].arg1
}

func (fake *FakeAPI) ListObjectVersionsReturns(result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.ListObjectVersionsStub = nil
	fake.listObjectVersionsReturns = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListObjectVersionsReturnsOnCall(i int, result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.ListObjectVersionsStub = nil
	if fake.listObjectVersionsReturnsOnCall == nil {
		fake.listObjectVersionsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectVersionsOutput
			result2 error
		})
	}
	fake.listObjectVersionsReturnsOnCall[i] = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteObjectsMutex.RLock()
	defer fake.deleteObjectsMutex.RUnlock()
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ s3svc.API = new(FakeAPI)
